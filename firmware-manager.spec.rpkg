# The following tag is to get correct syntax highlighting for this file in vim text editor
# vim: syntax=spec

Name:       {{{ git_dir_name }}}
Version:    0.1.2
Release:    2
Summary:    system76-firmware
License:    GPLv3
URL:        https://github.com/szydell/firmware-manager

# Detailed information about the source Git repository and the source commit
# for the created rpm package
VCS:        {{{ git_dir_vcs }}}

# git_dir_pack macro places the repository content (the source files) into a tarball
# and returns its filename. The tarball will be used to build the rpm.
Source:     {{{ git_dir_pack }}}

#Packages required for build
BuildRequires: cargo
%{?systemd_requires}
BuildRequires: dbus-devel
BuildRequires: openssl-devel
BuildRequires: systemd-devel
BuildRequires: cairo-gobject-devel
BuildRequires: pango-devel
BuildRequires: atk-devel
BuildRequires: gtk3-devel
BuildRequires: xz-devel
BuildRequires: libXrandr-devel
BuildRequires: libXcursor-devel
BuildRequires: libXcomposite-devel

#Packages required to work
Requires: dbus-common 
Requires: systemd
Requires: system76-firmware
Requires: fwupd


# More detailed description of the package
%description
System76 GUI firmware manager

%define debug_package %{nil}

#--
%prep
{{{ git_dir_setup_macro }}}

# This will invoke `make` command in the directory with the extracted sources.
%build
make prefix=/usr libdir=/usr/lib64

# This will copy the files generated by the `make` command above into
# the installable rpm package.
%install

make install-bin prefix=/usr libdir=/usr/lib64 DESTDIR=%{buildroot}
make install-ffi prefix=/usr libdir=/usr/lib64 DESTDIR=%{buildroot}
make install-notify prefix=/usr DESTDIR=%{buildroot}
make install-icons prefix=/usr libdir=/usr/lib64 DESTDIR=%{buildroot}



# do after installation
%post
systemctl daemon-reload >/dev/null 2>&1 || :
echo "To enable firmware updates notification run: systemctl enable --user com.system76.FirmwareManager.Notify.timer"

# do before uninstallation
%preun
%systemd_preun com.system76.FirmwareManager.Notify.service

# do after unistallation
%postun
systemctl daemon-reload >/dev/null 2>&1 || :



# Those files will be in the rpm
%files
%{_sysconfdir}/xdg/autostart/com.system76.FirmwareManager.Notify.desktop
%{_userunitdir}/com.system76.FirmwareManager.Notify.timer
%{_userunitdir}/com.system76.FirmwareManager.Notify.service
%{_libdir}/pkgconfig/firmware_manager.pc
%{_libdir}/libfirmware_manager.so
%{_includedir}/firmware_manager.h
%{_datadir}/icons/hicolor/64x64/apps/firmware-manager.png
%{_datadir}/icons/hicolor/64x64@2x/apps/firmware-manager.png
%{_datadir}/icons/hicolor/16x16@2x/apps/firmware-manager.png
%{_datadir}/icons/hicolor/16x16/apps/firmware-manager.png
%{_datadir}/icons/hicolor/32x32/apps/firmware-manager.png
%{_datadir}/icons/hicolor/24x24@2x/apps/firmware-manager.png
%{_datadir}/icons/hicolor/128x128/apps/firmware-manager.png
%{_datadir}/icons/hicolor/128x128@2x/apps/firmware-manager.png
%{_datadir}/icons/hicolor/48x48/apps/firmware-manager.png
%{_datadir}/icons/hicolor/scalable/apps/firmware-manager-symbolic.svg
%{_datadir}/icons/hicolor/256x256@2x/apps/firmware-manager.png
%{_datadir}/icons/hicolor/48x48@2x/apps/firmware-manager.png
%{_datadir}/icons/hicolor/24x24/apps/firmware-manager.png
%{_datadir}/icons/hicolor/256x256/apps/firmware-manager.png
%{_datadir}/icons/hicolor/32x32@2x/apps/firmware-manager.png
%{_datadir}/metainfo/com.system76.FirmwareManager.appdata.xml
%{_datadir}/applications/com.system76.FirmwareManager.desktop
%{_bindir}/com.system76.FirmwareManager
%{_bindir}/com.system76.FirmwareManager.Notify
%{_libdir}/libfirmware_manager.so.0

# Changelog
%changelog
{{{ git_dir_changelog }}}


